roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
?check
?check
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE)
?check
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi", cran = TRUE, incoming = TRUE, remote = TRUE)
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi",
cran = TRUE, incoming = TRUE, remote = TRUE, force_suggests = TRUE)
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi",
cran = TRUE, incoming = TRUE, remote = TRUE, force_suggests = TRUE)
install.pandoc()
installr::install.pandoc()
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi",
cran = TRUE, incoming = TRUE, remote = TRUE, force_suggests = TRUE)
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi",
cran = TRUE, incoming = TRUE, remote = TRUE, force_suggests = TRUE)
devtools::check_win_release("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check_win_devel("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check_win_release("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check_win_devel("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi",
cran = TRUE, incoming = TRUE, remote = TRUE, force_suggests = TRUE)
devtools::check_win_release("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
shiny::runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
ui <- fluidPage(
useShinyalert(),
titlePanel(
title=div(img(src="credi_logo.jpg", width = "300px"),
"Scoring Application (version 0.1)"),
windowTitle= "CREDI Scoring App"
),
sidebarLayout(
sidebarPanel(
#Some CSS
tags$head(
tags$style(type="text/css", "select {width: 250px; }"),
tags$style(type="text/css", ".span4 {width: 290px; }"),
tags$style(type="text/css", ".well {width: 300px; }")
),
#Reverse scoring option
checkboxInput(inputId = "reverse",
label = HTML(paste0("My data are ", "<b>","not","</b>", " reverse coded.", "<i>"," Selecting this option will have the program automatically reverse-code your data.","</i>")),
value = TRUE),
checkboxInput(inputId = "itemlevel",
label = HTML(paste0("I want to preserve item-level data.", "<i>", " Select this option if you want to keep the data from each CREDI question. By default, the program will automatically discard item-level responses in the scored data.","</i>")),
value = FALSE),
#File upload box
fileInput("file1", "Choose .xslx or .csv File",
accept = c(".xlsx", ".xls", ".csv")
),
#Download button
# conditionalPanel(
#   condition = "output.success",
#   downloadButton("scores", "Download processed data")
# ),
#
# conditionalPanel(
#   condition = "output.run",
#   downloadButton("log", "Download Log")
# )
),
#The main panel will simply display the processed output
mainPanel(
add_busy_bar(timeout = 1000, color = "#112446", centered = FALSE,
height = "8px"),
conditionalPanel(
condition = "!output.run",
br(),
p(tags$body("Please upload an Excel spreadsheet or CSV file using the sidebar. Ensure that your file (.xslx or .csv) has a unique ID variable, an AGE variable, and CREDI variables.")),
p(tags$body("You can specify if your data are already reverse-coded or not, and if you want to include your item-level data after processing.")),
p(tags$body("Please see the",
tags$a(href="https://cdn1.sph.harvard.edu/wp-content/uploads/sites/2435/2016/05/CREDI-Scoring-Manual-8-Jun-2018.pdf",
"CREDI scoring guide")),
tags$body("for more information."))
),
conditionalPanel(
condition = "output.success",
fluidRow(
column(width = 12,
mainPanel("Success! Download scored data and log below.", style="color:green"))),
fluidRow(
column(width = 12,
downloadButton("scores", "Download processed data"))),
fluidRow(
column(width = 12,
downloadButton("log", "Download Log"))),
fluidRow(
column(width = 12,
mainPanel("Below is a summary of scored responses by age band"))),
fluidRow(
column(width = 12,
tableOutput("scoretable"))),
fluidRow(
column(width = 12,
mainPanel("Flagged observations have a low number of responses in the particular domain and are calculated but may be innacurate."))),
fluidRow(
column(width = 12,
tableOutput("flaggedobs"))),
fluidRow(
column(width = 12,
plotOutput("avgscores"))),
,
plotOutput("zscores")
),
conditionalPanel(
condition = "output.failure",
fluidRow(
column(width = 12,
mainPanel("Error processing data. Please see log for details. If you are unable to resolve the errors by examining the below, please contact jseiden@g.harvard.edu for assistance. ",
style="color:red"))),
fluidRow(
column(width = 12,
tableOutput("logfailuredisp"))),
fluidRow(
column(width = 12,
downloadButton("logfailure", "Download Log"))),
)
)
)
)
runApp('Git Hub/CREDI Scoring App')
devtools::install_github("https://github.com/marcus-waldman/credi")
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
runApp('Git Hub/CREDI Scoring App')
shiny::runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
shiny::runApp('Git Hub/CREDI Scoring App')
knitr::opts_chunk$set(echo = TRUE)
library(readstata13)
library(tidyverse)
library(glmnet)
library(caret)
y2_coverpage_obs <- read.dta13("y2o_coverpage.dta")
View(y2_coverpage_obs)
y1_coverpage_obs <- read.dta13("y1o_coverpage.dta")
y2_coverpage_obs <- read.dta13("y2o_coverpage.dta")
y2_coverpage_obs$provid %in% y1_coverpage_obs$provid
mean(y2_coverpage_obs$provid %in% y1_coverpage_obs$provid)
mean(y2_coverpage_obs$classid %in% y1_coverpage_obs$classid)
#Re-format the child data so that it is one row per child
y2_child_obs <- y2_child_obs_raw %>%
group_by(cid, classid) %>%
mutate(nsweeps = n()) %>%
mutate_at(vars(o_c_verbal:o_c_focus), as.character) %>%
select(c(classid, nsweeps, o_c_verbal:o_c_focus)) %>%
dummy_cols(select_columns = c("o_c_verbal", "o_c_towhom", "o_c_schedule", "o_c_interaction", "o_c_typetask", "o_c_involvement", "o_c_focus"),
remove_selected_columns = TRUE) %>%
group_by(cid, classid) %>%
summarize(across(everything(), mean, na.rm = TRUE)) %>%
filter(nsweeps >= 10 ) %>% #THIS IS AN ARBITRARY PARAMETER
group_by(classid) %>%
mutate(nclass = n(),
#This horrid mess calculated the leave-out mean in the class for each student for each COP variable
`o_c_verbal_Fuss/Cry (FC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Fuss/Cry (FC)`[-.x]), na.rm = TRUE),
`o_c_verbal_Listening (L)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Listening (L)`[-.x]), na.rm = TRUE),
`o_c_verbal_No (N)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_No (N)`[-.x]), na.rm = TRUE),
`o_c_verbal_Talk (T)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Talk (T)`[-.x]), na.rm = TRUE),
`o_c_verbal_Talk, Sounds (TS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Talk, Sounds (TS)`[-.x]), na.rm = TRUE),
`o_c_verbal_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_NA`[-.x]), na.rm = TRUE),
`o_c_towhom_Child (C): One other child_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Child (C): One other child`[-.x]), na.rm = TRUE),
`o_c_towhom_No talk/listen (NT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_No talk/listen (NT)`[-.x]), na.rm = TRUE),
`o_c_towhom_Self (S)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Self (S)`[-.x]), na.rm = TRUE),
`o_c_towhom_Small Group, No Teacher (SG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Small Group, No Teacher (SG)`[-.x]), na.rm = TRUE),
`o_c_towhom_Small Group, With Teacher (SGT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Small Group, With Teacher (SGT)`[-.x]), na.rm = TRUE),
`o_c_towhom_Teacher (T): Teacher or assistant (adult)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Teacher (T): Teacher or assistant (adult)`[-.x]), na.rm = TRUE),
`o_c_towhom_Whole Group, No Teacher (WG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Whole Group, No Teacher (WG)`[-.x]), na.rm = TRUE),
`o_c_towhom_Whole Group, With Teacher (WGT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Whole Group, With Teacher (WGT)`[-.x]), na.rm = TRUE),
`o_c_towhom_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_NA`[-.x]), na.rm = TRUE),
`o_c_schedule_Centers (C)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Centers (C)`[-.x]), na.rm = TRUE),
`o_c_schedule_Combination of Small Group and Centers (SGC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Combination of Small Group and Centers (SGC)`[-.x]), na.rm = TRUE),
`o_c_schedule_Gym (G)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Gym (G)`[-.x]), na.rm = TRUE),
`o_c_schedule_Individual activity w teacher (IAT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Individual activity w teacher (IAT)`[-.x]), na.rm = TRUE),
`o_c_schedule_Meal Time (MT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Meal Time (MT)`[-.x]), na.rm = TRUE),
`o_c_schedule_Nap (N)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Nap (N)`[-.x]), na.rm = TRUE),
`o_c_schedule_Playground (P)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Playground (P)`[-.x]), na.rm = TRUE),
`o_c_schedule_Small Groups (SG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Small Groups (SG)`[-.x]), na.rm = TRUE),
`o_c_schedule_Special (SP)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Special (SP)`[-.x]), na.rm = TRUE),
`o_c_schedule_Transition (T)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Transition (T)`[-.x]), na.rm = TRUE),
`o_c_schedule_Whole Group (WG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Whole Group (WG)`[-.x]), na.rm = TRUE),
`o_c_interaction_Alone (AL)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Alone (AL)`[-.x]), na.rm = TRUE),
`o_c_interaction_Associative (AS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Associative (AS)`[-.x]), na.rm = TRUE),
`o_c_interaction_Cooperative (C)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Cooperative (C)`[-.x]), na.rm = TRUE),
`o_c_interaction_Non-Academic (NA)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Non-Academic (NA)`[-.x]), na.rm = TRUE),
`o_c_interaction_Onlooker (ON)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Onlooker (ON)`[-.x]), na.rm = TRUE),
`o_c_interaction_Parallel (P)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Parallel (P)`[-.x]), na.rm = TRUE),
`o_c_interaction_Social (SOC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Social (SOC)`[-.x]), na.rm = TRUE),
`o_c_interaction_Time Out (TO)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Time Out (TO)`[-.x]), na.rm = TRUE),
`o_c_interaction_Unoccupied (UN)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Unoccupied (UN)`[-.x]), na.rm = TRUE),
`o_c_interaction_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_NA`[-.x]), na.rm = TRUE),
`o_c_typetask_Disruptive (D)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Disruptive (D)`[-.x]), na.rm = TRUE),
`o_c_typetask_Non-Sequential (NS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Non-Sequential (NS)`[-.x]), na.rm = TRUE),
`o_c_typetask_None (N)"_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_None (N)`[-.x]), na.rm = TRUE),
`o_c_typetask_Other (O)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Other (O)`[-.x]), na.rm = TRUE),
`o_c_typetask_Passive Instruction (PI)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Passive Instruction (PI)`[-.x]), na.rm = TRUE),
`o_c_typetask_Sequential (SQ)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Sequential (SQ)`[-.x]), na.rm = TRUE),
`o_c_typetask_Sleep (S)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Sleep (S)`[-.x]), na.rm = TRUE),
`o_c_typetask_Social (SOC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Social (SOC)`[-.x]), na.rm = TRUE),
`o_c_typetask_Time Out (TO)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Time Out (TO)`[-.x]), na.rm = TRUE),
`o_c_typetask_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_NA`[-.x]), na.rm = TRUE),
`o_c_involvement_High (H)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_High (H)`[-.x]), na.rm = TRUE),
`o_c_involvement_Low (L)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Low (L)`[-.x]), na.rm = TRUE),
`o_c_involvement_Medium (M)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Medium (M)`[-.x]), na.rm = TRUE),
`o_c_involvement_Medium High (MH)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Medium High (MH)`[-.x]), na.rm = TRUE),
`o_c_involvement_Medium Low (ML)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Medium Low (ML)`[-.x]), na.rm = TRUE),
`o_c_involvement_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_NA`[-.x]), na.rm = TRUE),
`o_c_focus_Art (A)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Art (A)`[-.x]), na.rm = TRUE),
`o_c_focus_Drama (D)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Drama (D)`[-.x]), na.rm = TRUE),
`o_c_focus_Gross Motor (GM)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Gross Motor (GM)`[-.x]), na.rm = TRUE),
`o_c_focus_Language Arts - Writing (LAW)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Language Arts - Writing (LAW)`[-.x]), na.rm = TRUE),
`o_c_focus_Literacy - Writing (LW)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Literacy - Writing (LW)`[-.x]), na.rm = TRUE),
`o_c_focus_Literacy (L)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Literacy (L)`[-.x]), na.rm = TRUE),
`o_c_focus_Math (M)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Math (M)`[-.x]), na.rm = TRUE),
`o_c_focus_Music and Movement (MM)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Music and Movement (MM)`[-.x]), na.rm = TRUE),
`o_c_focus_None (N)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_None (N)`[-.x]), na.rm = TRUE),
`o_c_focus_Other (O)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Other (O)`[-.x]), na.rm = TRUE),
`o_c_focus_Other Language (OL)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Reading (R)`[-.x]), na.rm = TRUE),
`o_c_focus_Science (SC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Science (SC)`[-.x]), na.rm = TRUE),
`o_c_focus_Social Studies (SS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Social Studies (SS)`[-.x]), na.rm = TRUE),
`o_c_focus_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_NA`[-.x]), na.rm = TRUE)) %>%
ungroup
knitr::opts_chunk$set(echo = TRUE)
library(readstata13)
library(tidyverse)
library(glmnet)
library(caret)
library(fastDummies)
#Input the Year One long child and teacher observation data
y1_child_obs_raw <- read.dta13("y1o_c_long.dta")
y1_teacher_obs_raw <- read.dta13("y1o_t_long.dta")
y1_coverpage_obs <- read.dta13("y1o_coverpage.dta")
#Re-format the child data so that it is one row per child
y1_child_obs <- y1_child_obs_raw %>%
mutate(cid = ifelse(childid == "N/A", o_c_uniqueid, childid)) %>%
group_by(cid, classid) %>%
mutate(nsweeps = n()) %>%
mutate_at(vars(o_c_verbal:o_c_focus), as.character) %>%
select(c(classid, nsweeps, o_c_verbal:o_c_focus)) %>%
dummy_cols(select_columns = c("o_c_verbal", "o_c_towhom", "o_c_schedule", "o_c_interaction", "o_c_typetask", "o_c_involvement", "o_c_focus"),
remove_selected_columns = TRUE) %>%
group_by(cid, classid) %>%
summarize(across(everything(), mean, na.rm = TRUE)) %>%
filter(nsweeps >= 10 ) %>% #THIS IS AN ARBITRARY PARAMETER
group_by(classid) %>%
mutate(nclass = n(),
#This horrid mess calculated the leave-out mean in the class for each student for each COP variable
`o_c_verbal_Fuss/Cry (FC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Fuss/Cry (FC)`[-.x]), na.rm = TRUE),
`o_c_verbal_Listening (L)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Listening (L)`[-.x]), na.rm = TRUE),
`o_c_verbal_No (N)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_No (N)`[-.x]), na.rm = TRUE),
`o_c_verbal_Talk (T)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Talk (T)`[-.x]), na.rm = TRUE),
`o_c_verbal_Talk, Sounds (TS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_Talk, Sounds (TS)`[-.x]), na.rm = TRUE),
`o_c_verbal_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_verbal_NA`[-.x]), na.rm = TRUE),
`o_c_towhom_Child (C): One other child_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Child (C): One other child`[-.x]), na.rm = TRUE),
`o_c_towhom_No talk/listen (NT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_No talk/listen (NT)`[-.x]), na.rm = TRUE),
`o_c_towhom_Self (S)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Self (S)`[-.x]), na.rm = TRUE),
`o_c_towhom_Small Group, No Teacher (SG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Small Group, No Teacher (SG)`[-.x]), na.rm = TRUE),
`o_c_towhom_Small Group, With Teacher (SGT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Small Group, With Teacher (SGT)`[-.x]), na.rm = TRUE),
`o_c_towhom_Teacher (T): Teacher or assistant (adult)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Teacher (T): Teacher or assistant (adult)`[-.x]), na.rm = TRUE),
`o_c_towhom_Whole Group, No Teacher (WG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Whole Group, No Teacher (WG)`[-.x]), na.rm = TRUE),
`o_c_towhom_Whole Group, With Teacher (WGT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_Whole Group, With Teacher (WGT)`[-.x]), na.rm = TRUE),
`o_c_towhom_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_towhom_NA`[-.x]), na.rm = TRUE),
`o_c_schedule_Centers (C)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Centers (C)`[-.x]), na.rm = TRUE),
`o_c_schedule_Combination of Small Group and Centers (SGC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Combination of Small Group and Centers (SGC)`[-.x]), na.rm = TRUE),
`o_c_schedule_Gym (G)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Gym (G)`[-.x]), na.rm = TRUE),
`o_c_schedule_IAT_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_IAT`[-.x]), na.rm = TRUE),
`o_c_schedule_Meal Time (MT)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Meal Time (MT)`[-.x]), na.rm = TRUE),
`o_c_schedule_Nap (N)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Nap (N)`[-.x]), na.rm = TRUE),
`o_c_schedule_Playground (P)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Playground (P)`[-.x]), na.rm = TRUE),
`o_c_schedule_Small Groups (SG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Small Groups (SG)`[-.x]), na.rm = TRUE),
`o_c_schedule_Special (SP)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Special (SP)`[-.x]), na.rm = TRUE),
`o_c_schedule_Transition (T)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Transition (T)`[-.x]), na.rm = TRUE),
`o_c_schedule_Whole Group (WG)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_schedule_Whole Group (WG)`[-.x]), na.rm = TRUE),
`o_c_interaction_Alone (AL)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Alone (AL)`[-.x]), na.rm = TRUE),
`o_c_interaction_Associative (AS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Associative (AS)`[-.x]), na.rm = TRUE),
`o_c_interaction_Cooperative (C)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Cooperative (C)`[-.x]), na.rm = TRUE),
`o_c_interaction_Non-Academic (NA)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Non-Academic (NA)`[-.x]), na.rm = TRUE),
`o_c_interaction_Onlooker (ON)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Onlooker (ON)`[-.x]), na.rm = TRUE),
`o_c_interaction_Parallel (P)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Parallel (P)`[-.x]), na.rm = TRUE),
`o_c_interaction_Social (SOC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Social (SOC)`[-.x]), na.rm = TRUE),
`o_c_interaction_Time Out (TO)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Time Out (TO)`[-.x]), na.rm = TRUE),
`o_c_interaction_Unoccupied (UN)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_Unoccupied (UN)`[-.x]), na.rm = TRUE),
`o_c_interaction_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_interaction_NA`[-.x]), na.rm = TRUE),
`o_c_typetask_Disruptive (D)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Disruptive (D)`[-.x]), na.rm = TRUE),
`o_c_typetask_Non-Sequential (NS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Non-Sequential (NS)`[-.x]), na.rm = TRUE),
`o_c_typetask_None (N)"_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_None (N)`[-.x]), na.rm = TRUE),
`o_c_typetask_Other (O)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Other (O)`[-.x]), na.rm = TRUE),
`o_c_typetask_Passive Instruction (PI)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Passive Instruction (PI)`[-.x]), na.rm = TRUE),
`o_c_typetask_Sequential (SQ)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Sequential (SQ)`[-.x]), na.rm = TRUE),
`o_c_typetask_Sleep (S)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Sleep (S)`[-.x]), na.rm = TRUE),
`o_c_typetask_Social (SOC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Social (SOC)`[-.x]), na.rm = TRUE),
`o_c_typetask_Time Out (TO)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_Time Out (TO)`[-.x]), na.rm = TRUE),
`o_c_typetask_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_typetask_NA`[-.x]), na.rm = TRUE),
`o_c_involvement_High (H)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_High (H)`[-.x]), na.rm = TRUE),
`o_c_involvement_Low (L)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Low (L)`[-.x]), na.rm = TRUE),
`o_c_involvement_Medium (M)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Medium (M)`[-.x]), na.rm = TRUE),
`o_c_involvement_Medium High (MH)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Medium High (MH)`[-.x]), na.rm = TRUE),
`o_c_involvement_Medium Low (ML)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_Medium Low (ML)`[-.x]), na.rm = TRUE),
`o_c_involvement_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_involvement_NA`[-.x]), na.rm = TRUE),
`o_c_focus_Art (A)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Art (A)`[-.x]), na.rm = TRUE),
`o_c_focus_Drama (D)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Drama (D)`[-.x]), na.rm = TRUE),
`o_c_focus_Gross Motor (GM)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Gross Motor (GM)`[-.x]), na.rm = TRUE),
`o_c_focus_Language Arts - Writing (LAW)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Language Arts - Writing (LAW)`[-.x]), na.rm = TRUE),
`o_c_focus_Literacy - Writing (LW)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Literacy - Writing (LW)`[-.x]), na.rm = TRUE),
`o_c_focus_Literacy (L)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Literacy (L)`[-.x]), na.rm = TRUE),
`o_c_focus_Math (M)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Math (M)`[-.x]), na.rm = TRUE),
`o_c_focus_Music and Movement (MM)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Music and Movement (MM)`[-.x]), na.rm = TRUE),
`o_c_focus_None (N)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_None (N)`[-.x]), na.rm = TRUE),
`o_c_focus_Other (O)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Other (O)`[-.x]), na.rm = TRUE),
`o_c_focus_Other Language (OL)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Other Language (OL)`[-.x]), na.rm = TRUE),
`o_c_focus_Reading (R)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Reading (R)`[-.x]), na.rm = TRUE),
`o_c_focus_Science (SC)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Science (SC)`[-.x]), na.rm = TRUE),
`o_c_focus_Social Studies (SS)_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_Social Studies (SS)`[-.x]), na.rm = TRUE),
`o_c_focus_NA_classmean` =
map_dbl(row_number(), ~ mean(`o_c_focus_NA`[-.x]), na.rm = TRUE)) %>%
ungroup
#Re-format the teacher data so that it is one row per class
y1_teacher_obs <- y1_teacher_obs_raw %>%
dummy_cols(select_columns = c("o_t_verbal_o", "o_t_whom_o", "o_t_schedule_o",
"o_t_task_o", "o_t_instruct", "o_t_focus_o",
"o_t_tone_o", "o_t_attention_o", "o_t_es_o"),
remove_selected_columns = TRUE) %>%
group_by(classid) %>%
summarize(
nsweeps = n(),
nadult = length(unique(o_t_uniqueid)),
across(starts_with(c("o_t_verbal_o", "o_t_whom_o", "o_t_schedule_o",
"o_t_task_o", "o_t_instruct", "o_t_focus_o",
"o_t_tone_o", "o_t_attention_o", "o_t_es_o")),
mean)) %>%
select(-ends_with("_")) %>%
ungroup
#Merge teacher and child observations
y1_obs <- left_join(y1_child_obs, y1_teacher_obs, by = "classid")
credi::score(
credi::score()
credi::score()
credi::score()
devtools::uninstall("credi")
devtools::install_github("https://github.com/marcus-waldman/credi", force = TRUE)
?detach
devtools::install_github("https://github.com/marcus-waldman/credi", force = TRUE)
devtools::uninstall("credi")
devtools::uninstall("credi")
devtools::install_github("https://github.com/marcus-waldman/credi", force = TRUE)
devtools::install_github("https://github.com/marcus-waldman/credi", force = TRUE)
devtools::install_github("https://github.com/marcus-waldman/credi", force = TRUE)
shiny::runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
