),
#The main panel will simply display the processed output
mainPanel(
add_busy_bar(timeout = 1000, color = "#112446", centered = FALSE,
height = "8px"),
conditionalPanel(
condition = "!output.run",
br(),
p(tags$body("Please upload a CSV using the sidebar. Ensure that your CSV has a unique ID variable, an AGE variable, and CREDI variables.")),
p(tags$body("You can specify if your data is already reverse-coded or not, and if you want to include your item-level data after processing.")),
p(tags$body("Please see the",
tags$a(href="https://cdn1.sph.harvard.edu/wp-content/uploads/sites/2435/2016/05/CREDI-Scoring-Manual-8-Jun-2018.pdf",
"CREDI scoring guide")),
tags$body("for more information."))
),
conditionalPanel(
condition = "output.success",
plotOutput("avgscores"),
plotOutput("zscores")
),
conditionalPanel(
condition = "output.failure",
mainPanel("Error processing data. Please see log for details")
)
)
)
)
server <- function(input, output, session) {
#Create a dictionary for CREDI variable names
load("environment.rda")
vecQnames <- c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
#Confirm user will not upload PII
shinyalert(
title = "Usage Agreement",
text = "This app is only to be used with data that DOES NOT include personally identifiable information (PII). By clicking \"I agree\" you are confirming that any data uploaded has been anonymized and does not include any PII or sensitive information." ,
closeOnEsc = FALSE,
closeOnClickOutside = FALSE,
html = FALSE,
type = "warning",
showConfirmButton = TRUE,
showCancelButton = FALSE,
confirmButtonText = "I agree",
confirmButtonCol = "#228B22",
timer = 0,
imageUrl = "",
animation = TRUE
)
#Clear data upon session end (maybe not necessary)
# session$onSessionEnded(function() {
#   if (!is.null(input$file1)) {
#     file.remove(input$file1$datapath)
#   }
# })
preprocessed <- reactive({
#ShowDon't throw an error if nothing is uploaded yet.
validate(
need(input$file1 != "", "")
)
#Use the input file name to upload a raw CSV of the results
inFile <- input$file1
preprocessed <- readr::read_csv(inFile$datapath)
})
###Process the data and run the CREDI code, returning a list with the log and the scores (if successful)
processed <- reactive({
dat <- jmscredi::score(data = preprocessed(), interactive = FALSE, reverse_code = input$reverse)
list(scores = dat$scores, log = dat$log)
})
log <- reactive({
processed()$log
})
scores <- reactive({
processed()$scores
})
#Check success of scoring
output$success <- reactive({
!is.null(scores())
})
outputOptions(output, "success", suspendWhenHidden = FALSE)
output$run <- reactive({
!is.null(log())
})
outputOptions(output, "run", suspendWhenHidden = FALSE)
output$failure <- reactive({
!is.null(log()) & is.null(scores())
})
outputOptions(output, "failure", suspendWhenHidden = FALSE)
#Write the contents to a processing program to show when it's running
output$avgscores <- renderPlot({
scores() %>%
mutate(age_band = ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE < 36, "30-36", "Overage"))))))) %>%
pivot_longer(cols = c(OVERALL, SEM, MOT, LANG, COG),
values_to = "Score",
names_to = "Domain") %>%
group_by(Domain, age_band) %>%
summarise(Score = mean(Score, na.rm=TRUE), .groups = "keep") %>%
ggplot(aes(x = factor(Domain), y=Score, fill = age_band)) +
geom_bar(stat="identity", position="dodge") +
xlab("CREDI domain score averages")
})
output$zscores <- renderPlot({
scores() %>%
pivot_longer(cols = c(z_SEM, z_MOT, z_LANG, z_COG),
values_to = "Scores",
names_to = "Domain") %>%
group_by(Domain) %>%
ggplot(aes(x = Scores, group = Domain, fill = Domain, alpha = .5)) +
geom_density()
})
#Write a downloadable csv of processed dataset
output$scores <- downloadHandler(
filename = "Scored_CREDI_Data.csv",
content = function(file) {
#We print out all variables if item-level was selected
if(input$itemlevel){
write.csv(scores(), file, row.names = FALSE)
}
#Otherwise we remove the item-level data
else {
scores <- scores()[,!(names(scores()) %in% vecQnames)]
write.csv(scores, file, row.names = FALSE)
}
}
)
#Write out the log in a nice .txt using code copied from CREDI package.
output$log <- downloadHandler(
filename = "log.txt",
content = function(file) {
sink(file, append = TRUE)
for (l in 1:length(log())){
if (is.character(log()[[l]])){
writeLines(log()[[l]])
} else {
print(log()[[l]])
}
}
sink()
}
)
# Delete the temporary directory when the session ends (I am not sure if this is necessary)
session$onSessionEnded(
function(){
unlink(tempdir(), recursive = TRUE)
})
}
shinyApp(ui, server)
shiny::runApp()
runApp()
runApp()
runApp()
installr::uninstall.packages("jmscredi")
devtools::install_github("jmseiden/jms_credi")
shiny::runApp()
installr::uninstall.packages("jmscredi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/jms_credi")
runApp()
runApp()
runApp()
dat <- read_excel("C:/Users/Jonat/Downloads/Scored_CREDI_Data.xlsx")
dat <- dat %>%
mutate(`Age Band` = ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage")))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36")))
dat%>%filter(is.na(`Age Band`))
dat %>% filter(is.na(`Age Band`))
View(dat %>% filter(is.na(`Age Band`)))
jms_credi::score(dat)
jmscredi::score(dat)
dat <- read_excel("C:/Users/Jonat/Downloads/Scored_CREDI_Data.xlsx")
dat <- dat %>%
mutate(`Age Band` = ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage")))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36")))
jmscredi::score(dat)
sum(is.na(dat$ID))
jmscredi::score(dat)
dat <- read_excel("C:/Users/Jonat/Downloads/Scored_CREDI_Data.xlsx")
dat <- dat %>%
mutate(`Age Band` = ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage")))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36")))
sum(is.na(dat$ID))
jmscredi::score(dat)
runApp()
dat %>%
mutate(`Age Band` = ifelse(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage")))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing")))
dat %>%
mutate(`Age Band` = ifelse(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage")))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing")))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage")))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing")))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage"))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing")))
runApp()
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage"))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing")))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage"))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing"))) %>%
group_by(`Age Band`) %>%
summarize(OVERALL = mean(OVERALL))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age",
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage"))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing"))) %>%
group_by(`Age Band`) %>%
summarize(OVERALL = mean(OVERALL))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE)))
is.na(dat$AGE)
sum(is.na(dat$AGE))
ifelse(is.na(dat$AGE), "Missing Age", "Not missing age")
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
ifelse(AGE < 6, "0-5",
ifelse(AGE < 11, "6-11",
ifelse(AGE < 17, "12-17",
ifelse(AGE < 24, "18-24",
ifelse(AGE < 29, "25-29",
ifelse(AGE <= 36, "30-36", "Overage"))))))),
`Age Band` = ordered(`Age Band`, levels = c("0-5", "6-11", "12-17","18-24","25-29", "30-36", "Overage", "Missing"))) %>%
group_by(`Age Band`) %>%
summarize(OVERALL =mean(OVERALL))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`))
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`)) %>%
group_by(`Age Band`)
dat %>%
mutate(`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`),
`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`)) %>%
group_by(`Age Band`) %>%
summarize(OVERALL =mean(OVERALL))
dat %>%
mutate(`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`),
`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`)) %>%
group_by(`Age Band`) %>%
summarize(OVERALL =mean(OVERALL))
runApp()
dat %>%
mutate(`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`),
`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`))
dat %>%
mutate(`Age Band` = ifelse(AGE < 6, "0-5", `Age Band`),
`Age Band` = ifelse(AGE >= 6 & AGE < 12, "6-11", `Age Band`),
`Age Band` = ifelse(AGE >= 12 & AGE < 18, "12-17", `Age Band`),
`Age Band` = ifelse(AGE >= 18 & AGE < 25, "18-24", `Age Band`),
`Age Band` = ifelse(AGE >= 25 & AGE < 30, "25-29", `Age Band`),
`Age Band` = ifelse(AGE >= 30 & AGE <= 36, "30-36", `Age Band`),
`Age Band` = ifelse(AGE > 36, "Overage", `Age Band`),
`Age Band` = ifelse(is.na(AGE), "Missing age", `Age Band`))
runApp()
runApp()
runApp()
installr::uninstall.packages("jmscredi")
# devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/jms_credi")
devtools::install_github("jmseiden/jms_credi")
# Chunk 1
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE,
fig.width = 5,
fig.height = 3,
out.width = "5in",
out.height = "3in", fig.align = "center")
emp <- read_csv( "empathy_data.csv" ) %>%
rename(studID = X1)
# Chunk 2
head( emp )
# Chunk 3: toy.example.1
A <- data.frame( id = 1:4, x = 14:17, y = c(10,20,30,40), z = c(1000,2000,3000,4000) )
A
# Chunk 4: toy.example.2
A %>%
pivot_longer(cols = x:z) %>%
group_by(id) %>%
mutate(avg_score = mean(value)) %>%
pivot_wider()
# Chunk 5: toy.example.3
#Get the average score
avg_score <- A %>%
select(x:z) %>%
rowMeans()
#Add it to A
A %>%
mutate(avg_score = avg_score)
#You could do this in one line with a nested select
A %>%
mutate(avg_score = select(. , x:z) %>% rowMeans)
# Chunk 6: toy.example.4
columns.to.avg <- A %>% select(x:z)
avg_score <- apply(X = columns.to.avg, MARGIN = 1, FUN = mean)
A %>%
mutate(avg_score = avg_score)
# Chunk 7: get.emp.scores
emp <- emp %>%
mutate(na.count = rowSums(is.na(select(., starts_with("empathy_"))))) %>%
filter(na.count < 11 & !is.na(grade)) %>%
mutate(avg_emp = rowMeans(select(., starts_with("empathy_")), na.rm = TRUE))
# Chunk 8: aggregate.emp
emp %>%
group_by(grade) %>%
summarize(mean.empathy = mean(avg_emp)) %>%
knitr::kable()
emp %>%
ggplot(aes(x = grade, y = avg_emp, group = grade)) +
geom_boxplot() +
labs(y = "Empathy Score",
x= "Grade") +
scale_x_continuous(breaks = 6:12) +
ggtitle("Boxplots of Empathy scores by grade")
# Chunk 9: emp.explore
#Strong association of grade/age but some weird outliers
emp %>%
ggplot(aes(x = grade, y = age, group = grade)) +
geom_jitter(width = .1) +
labs(y = "Age",
x = "Grade") +
ggtitle("Age by grade")
emp %>%
filter(!is.na(female)) %>%
mutate(female = ifelse(female == 1, "Female", "Male")) %>%
ggplot(aes(x = grade, y = avg_emp, color = as.factor(female), group = female)) +
geom_jitter(alpha = .05) +
geom_smooth(method = "loess") +
scale_x_continuous(breaks = 6:12) +
labs(y = "Empathy Score",
x = "Grade",
color = "Sex") +
ggtitle("Sex and empathy score by grade")
# Chunk 10: emp.quadplot
model <- lm(avg_emp ~ grade + I(grade^2), data = emp)
grade <- seq(from = 6, to = 12, by = .01)
emp$preds <- predict(model)
emp %>%
ggplot(aes(x = grade, y = avg_emp)) +
geom_jitter(alpha = .05, width = .1) +
geom_line(aes(y = preds), size = 2, color = "purple") +
scale_x_continuous(breaks = 6:12) +
labs(y = "Empathy Score",
x = "Grade") +
ggtitle("Quadratic model predicting empathy score by grade")
# Chunk 11: emp.min.bruteforce
#This gets it according to very coarse grades
fake_students <- data.frame(grade = unique(emp$grade))
fake_students$pred.empathy <- predict(model, newdata = fake_students)
fake_students <- arrange( fake_students, pred.empathy )
min1 <- fake_students$grade[[1]]
#We can also esimate this more fine grained by allowing grade to be numerical
fake_students2 <- data.frame(grade = seq(from = 6, to = 12, by = .01))
fake_students2$pred.empathy <- predict(model, newdata = fake_students2)
fake_students2 <- arrange(fake_students2, pred.empathy )
min2 <- fake_students2$grade[[1]]
# Chunk 12: emp.min.math
a <- coefficients(model)[3]
b <- coefficients(model)[2]
min3 <- (-b) / (2*a)
#We can see that the
c(min1, min2, min3)
# Chunk 13
empathy = c( 10, 5, 30, 40, 5, 15 )
grades = c( 5,  6,   7, 8,  9, 10 )
which.min( empathy )
grades[ which.min( empathy ) ]
# Chunk 14
get.min.bootstrap <- function() {
#Resample the data
N <- nrow(emp)
emp.resample <- sample_n(emp, size = N, replace = TRUE)
#Fit a quadratic
model <- lm(avg_emp ~ grade + I(grade^2), data = emp.resample)
#Extract the minimum
a <- coefficients(model)[3]
b <- coefficients(model)[2]
min <- (-b) / (2*a)
#Return the minimum
return(min)
}
get.min.bootstrap() #This works it seems
#Get the min 1000 by replicating 1,000 times
set.seed(4224)
trials <- replicate(1000, get.min.bootstrap())
#Convert to a dataframe.
trials <- data.frame(estimates = trials)
#Plot with the "true" minimum that we extracted earlier (min3)
trials %>%
ggplot(aes(x = estimates)) +
geom_histogram() +
geom_vline(xintercept = min3, color = "purple", size = 2) +
labs(y = "Number of simulations",
x = "Estimated grade at minimum empathy level") +
ggtitle("Simulated and oberved quadratic minimums for empathy by grade")
# Chunk 15
#Get the 95% confidence interval by taking the 2.5th and 97.5th quantiles
confint <- quantile(trials$estimates, c(.025,.975))
confint
#Get the standard error
se <- sqrt(mean((trials$estimates - min3)^2))
se
#Plot the quadratic with the 95CI for the minimum
emp %>%
ggplot(aes(x = grade, y = avg_emp)) +
geom_jitter(alpha = .05, width = .1) +
geom_line(aes(y = preds), size = 2, color = "purple") +
scale_x_continuous(breaks = 6:12) +
labs(y = "Empathy Score",
x = "Grade") +
geom_vline(xintercept = confint, color = "orange", size = 1) +
ggtitle("Quadratic model predicting empathy score by grade with bootstrapped 95% CI for minimum")
