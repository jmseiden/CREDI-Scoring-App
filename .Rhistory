installr::uninstall.packages("credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
?score
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
devtools::install_github("https://github.com/marcus-waldman/credi")
library(credi)
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
library(credi)
credi::clean()
credi
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
library(credi)
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
devtools::check(credi)
devtools::check("credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(stats)
?stats
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
shiny::runApp('Git Hub/CREDI Scoring App')
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
runApp('Git Hub/CREDI Scoring App')
devtools::install_github("https://github.com/marcus-waldman/credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
runApp('Git Hub/CREDI Scoring App')
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
runApp('Git Hub/CREDI Scoring App')
shiny::runApp()
readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
credi::score(dat)
out <- credi::score(dat)
out
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
out <- credi::score(dat)
dat <- sample(dat, 10)
dat
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
dat <- dat[,3]
dat
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
dat <- dat[3,]
dat
credi::score(dat)
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
dat <- dat[350,]
dat
credi::score(dat)
class(dat)
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
ssessment_DATA_updated ids_test.xlsx")
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
credi::score(dat)
vecQnames
load("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi/R/sysdata.rda")
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
mest_df$Item
mest_df$CREDI_code
mest_df$CREDI_code_Apr17
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames.SF = c("ID","AGE",vecQnames[complete.cases(vecQnames)],sf_lf_naming$SF_var)
vecQnames.SF
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
devtools::build("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
remove.packages(credi)
remove.packages("credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
credi::score(dat)
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
stop = 0
# Make all variable names uppercase
names(input_df) = toupper(names(input_df))
input_df <- dat
input_df
is_sf <- sum(names(input_df) %in% sf_lf_naming$SF_var) >= 1
is_sf
sf_lf_naming$SF_var
names(input_df)
# Make all variable names uppercase
names(input_df) = toupper(names(input_df))
# Check to see if the input DF contains Short-Form variable names
is_sf <- sum(names(input_df) %in% sf_lf_naming$SF_var) >= 1
is_sf
# Ensure that there is a unique ID variable for each observations
if (!"ID" %in% names(input_df)){
stop = 1
stop_message = "\n* Error: An identifier variable named ID must be included."
log[[length(log)+1]] = stop_message
}
if (sum(is.na(input_df$ID))>0){
stop = 1
stop_message = "\n* Error: Values of ID variable missing for some observations. Each observation must have a unique ID value."
log[[length(log)+1]] = stop_message
}
if (dplyr::n_distinct(input_df$ID) != length(input_df$ID)){
stop = 1
stop_message = "\n* Error: Values of ID are not unique across observations. Construct a unique identifier and re-run."
log[[length(log)+1]] = stop_message
}
# Check that AGE is in the response data
if (!"AGE" %in% names(input_df)){
stop = 1
stop_message = "Error: An AGE variable named must be included. Scoring requires children's age in months."
log[[length(log)+1]] = stop_message
}
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
#Ignore variables that will not be used during scoring
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames.SF = c("ID","AGE",vecQnames[complete.cases(vecQnames)],sf_lf_naming$SF_var)
j_ignore = which(!names(input_df) %in% vecQnames.SF)
if (length(j_ignore)>0){
log[[length(log)+1]] = paste("Warning: The following variables will be ignored during scoring: ", paste(names(input_df)[j_ignore], collapse = ", "), sep = "")
input_df = input_df[,-j_ignore]
}
load("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi/R/sysdata.rda")
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames.SF = c("ID","AGE",vecQnames[complete.cases(vecQnames)],sf_lf_naming$SF_var)
j_ignore = which(!names(input_df) %in% vecQnames.SF)
input_df <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
stop = 0
# Make all variable names uppercase
names(input_df) = toupper(names(input_df))
# Check to see if the input DF contains Short-Form variable names
is_sf <- sum(names(input_df) %in% sf_lf_naming$SF_var) >= 1
is_sf
# Ensure that there is a unique ID variable for each observations
if (!"ID" %in% names(input_df)){
stop = 1
stop_message = "\n* Error: An identifier variable named ID must be included."
log[[length(log)+1]] = stop_message
}
if (sum(is.na(input_df$ID))>0){
stop = 1
stop_message = "\n* Error: Values of ID variable missing for some observations. Each observation must have a unique ID value."
log[[length(log)+1]] = stop_message
}
if (dplyr::n_distinct(input_df$ID) != length(input_df$ID)){
stop = 1
stop_message = "\n* Error: Values of ID are not unique across observations. Construct a unique identifier and re-run."
log[[length(log)+1]] = stop_message
}
# Check that AGE is in the response data
if (!"AGE" %in% names(input_df)){
stop = 1
stop_message = "Error: An AGE variable named must be included. Scoring requires children's age in months."
log[[length(log)+1]] = stop_message
}
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
#Ignore variables that will not be used during scoring
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames.SF = c("ID","AGE",vecQnames[complete.cases(vecQnames)],sf_lf_naming$SF_var)
j_ignore = which(!names(input_df) %in% vecQnames.SF)
if (length(j_ignore)>0){
log[[length(log)+1]] = paste("Warning: The following variables will be ignored during scoring: ", paste(names(input_df)[j_ignore], collapse = ", "), sep = "")
input_df = input_df[,-j_ignore]
}
log = list(c("------------------------------------"), c("Log for CREDI Scoring Messages"),
paste("Date:", Sys.time()), c("------------------------------------"))
stop = 0
# Make all variable names uppercase
names(input_df) = toupper(names(input_df))
# Check to see if the input DF contains Short-Form variable names
is_sf <- sum(names(input_df) %in% sf_lf_naming$SF_var) >= 1
# Ensure that there is a unique ID variable for each observations
if (!"ID" %in% names(input_df)){
stop = 1
stop_message = "\n* Error: An identifier variable named ID must be included."
log[[length(log)+1]] = stop_message
}
if (sum(is.na(input_df$ID))>0){
stop = 1
stop_message = "\n* Error: Values of ID variable missing for some observations. Each observation must have a unique ID value."
log[[length(log)+1]] = stop_message
}
if (dplyr::n_distinct(input_df$ID) != length(input_df$ID)){
stop = 1
stop_message = "\n* Error: Values of ID are not unique across observations. Construct a unique identifier and re-run."
log[[length(log)+1]] = stop_message
}
# Check that AGE is in the response data
if (!"AGE" %in% names(input_df)){
stop = 1
stop_message = "Error: An AGE variable named must be included. Scoring requires children's age in months."
log[[length(log)+1]] = stop_message
}
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
#Ignore variables that will not be used during scoring
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames.SF = c("ID","AGE",vecQnames[complete.cases(vecQnames)],sf_lf_naming$SF_var)
j_ignore = which(!names(input_df) %in% vecQnames.SF)
if (length(j_ignore)>0){
log[[length(log)+1]] = paste("Warning: The following variables will be ignored during scoring: ", paste(names(input_df)[j_ignore], collapse = ", "), sep = "")
input_df = input_df[,-j_ignore]
}
j_ignore
length(j_ignore)
log
# Ensure the naming of the response data is in the correct format
j_AGE_ID = c( which(names(input_df)=="ID"), which(names(input_df)=="AGE") )
j_AGE_ID
key_df = data.frame(
rbind( cbind(mest_df$CREDI_code, mest_df$CREDI_code),
cbind( mest_df$CREDI_code, mest_df$Item),
cbind( mest_df$CREDI_code, mest_df$CREDI_code_Apr17),
cbind( sf_lf_naming$LF, sf_lf_naming$SF_var))
)
key_df = key_df[complete.cases(key_df), ]
names(key_df) = c("CREDI_code", "Other")
key_df$CREDI_code = as.character(key_df$CREDI_code)
key_df$Other = as.character(key_df$Other)
key_df
unknown_vars = NULL
rename_df = data.frame(orig = rep(NA, ncol(input_df)), new = rep(NA, ncol(input_df)))
for (j in 1:ncol(input_df)){
if (names(input_df)[j]=="AGE"){
rename_df$orig[j] <-rename_df$new[j]<- "AGE"
} else if (names(input_df)[j]=="ID"){
rename_df$orig[j] <-rename_df$new[j]<- "ID"
} else{
jkey = which(key_df$Other == names(input_df)[j])
if (length(jkey)==1){
rename_df$orig[j] = names(input_df)[j]
rename_df$new[j] = key_df$CREDI_code[jkey]
}
if (length(jkey)==0){
rename_df$orig[j] = names(input_df)[j]
unknown_vars = c(unknown_vars,names(input_df)[j])}
}
}
# Check if there were unknown variable names and print them out
if (!is.null(unknown_vars)){
stop = 1
stop_message = paste("Error: Unknown variable names: ", paste(unknown_vars, collapse = ", "), sep = "")
log[[length(log)+1]] = stop_message
}
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
# Check if there were redundancy in original or recoded leads to redundant variable names
vnfreq_orig = data.frame(table(rename_df$orig)); names(vnfreq_orig) = c("orig","freq_orig")
inds = which(vnfreq_orig$freq_orig>1)
if (length(inds)>0){
stop = 1
stop_message = "Error: Non-unique variable names: "
log[[length(log)+1]] = paste(stop_message,
paste(vnfreq_orig$orig[inds], collapse = ", "), sep = "" )
}
vnfreq_new = data.frame(table(rename_df$new)); names(vnfreq_new) = c("new","freq_new")
rename_df = merge(x = rename_df, y = vnfreq_new, by = "new", all.x = TRUE, all.y = TRUE, sort = FALSE)
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
# Finally recode the variable
names(input_df) = rename_df$new
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class)) %>%
tibble::rownames_to_column(var = "variable")
names(classes) <- c("var", "var.class")
classes
tibble::rownames_to_column(var = "variable")
names(classes) <- c("var", "var.class")
classes <- as.data.frame(sapply(input_df, class)) %>%
tibble::rownames_to_column(var = "variable")
names(classes) <- c("var", "var.class")
classes
classes <- classes %>%
dplyr::mutate(check.var = var %in% vecQnames.SF) %>%
dplyr::mutate(OK = if_else(check.var == TRUE & var != "ID",
ifelse(var.class %in% c("numeric", "logical", "integer"),
TRUE, FALSE),NA))
classes
vecQnames.SF
check.var
classes$var %in% vecQnames.SF
vecQnames.SF
classes$var
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class)) %>%
tibble::rownames_to_column(var = "variable")
classes
input_df <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
stop = 0
# Make all variable names uppercase
names(input_df) = toupper(names(input_df))
# Check to see if the input DF contains Short-Form variable names
is_sf <- sum(names(input_df) %in% sf_lf_naming$SF_var) >= 1
# Ensure that there is a unique ID variable for each observations
if (!"ID" %in% names(input_df)){
stop = 1
stop_message = "\n* Error: An identifier variable named ID must be included."
log[[length(log)+1]] = stop_message
}
if (sum(is.na(input_df$ID))>0){
stop = 1
stop_message = "\n* Error: Values of ID variable missing for some observations. Each observation must have a unique ID value."
log[[length(log)+1]] = stop_message
}
if (dplyr::n_distinct(input_df$ID) != length(input_df$ID)){
stop = 1
stop_message = "\n* Error: Values of ID are not unique across observations. Construct a unique identifier and re-run."
log[[length(log)+1]] = stop_message
}
# Check that AGE is in the response data
if (!"AGE" %in% names(input_df)){
stop = 1
stop_message = "Error: An AGE variable named must be included. Scoring requires children's age in months."
log[[length(log)+1]] = stop_message
}
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
#Ignore variables that will not be used during scoring
vecQnames = c(mest_df$Item, mest_df$CREDI_code, mest_df$CREDI_code_Apr17)
vecQnames = c("ID","AGE",vecQnames[complete.cases(vecQnames)])
vecQnames.SF = c("ID","AGE",vecQnames[complete.cases(vecQnames)],sf_lf_naming$SF_var)
j_ignore = which(!names(input_df) %in% vecQnames.SF)
if (length(j_ignore)>0){
log[[length(log)+1]] = paste("Warning: The following variables will be ignored during scoring: ", paste(names(input_df)[j_ignore], collapse = ", "), sep = "")
input_df = input_df[,-j_ignore]
}
# Ensure the naming of the response data is in the correct format
j_AGE_ID = c( which(names(input_df)=="ID"), which(names(input_df)=="AGE") )
key_df = data.frame(
rbind( cbind(mest_df$CREDI_code, mest_df$CREDI_code),
cbind( mest_df$CREDI_code, mest_df$Item),
cbind( mest_df$CREDI_code, mest_df$CREDI_code_Apr17),
cbind( sf_lf_naming$LF, sf_lf_naming$SF_var))
)
key_df = key_df[complete.cases(key_df), ]
names(key_df) = c("CREDI_code", "Other")
key_df$CREDI_code = as.character(key_df$CREDI_code)
key_df$Other = as.character(key_df$Other)
unknown_vars = NULL
rename_df = data.frame(orig = rep(NA, ncol(input_df)), new = rep(NA, ncol(input_df)))
for (j in 1:ncol(input_df)){
if (names(input_df)[j]=="AGE"){
rename_df$orig[j] <-rename_df$new[j]<- "AGE"
} else if (names(input_df)[j]=="ID"){
rename_df$orig[j] <-rename_df$new[j]<- "ID"
} else{
jkey = which(key_df$Other == names(input_df)[j])
if (length(jkey)==1){
rename_df$orig[j] = names(input_df)[j]
rename_df$new[j] = key_df$CREDI_code[jkey]
}
if (length(jkey)==0){
rename_df$orig[j] = names(input_df)[j]
unknown_vars = c(unknown_vars,names(input_df)[j])}
}
}
# Check if there were unknown variable names and print them out
if (!is.null(unknown_vars)){
stop = 1
stop_message = paste("Error: Unknown variable names: ", paste(unknown_vars, collapse = ", "), sep = "")
log[[length(log)+1]] = stop_message
}
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
# Check if there were redundancy in original or recoded leads to redundant variable names
vnfreq_orig = data.frame(table(rename_df$orig)); names(vnfreq_orig) = c("orig","freq_orig")
inds = which(vnfreq_orig$freq_orig>1)
if (length(inds)>0){
stop = 1
stop_message = "Error: Non-unique variable names: "
log[[length(log)+1]] = paste(stop_message,
paste(vnfreq_orig$orig[inds], collapse = ", "), sep = "" )
}
vnfreq_new = data.frame(table(rename_df$new)); names(vnfreq_new) = c("new","freq_new")
rename_df = merge(x = rename_df, y = vnfreq_new, by = "new", all.x = TRUE, all.y = TRUE, sort = FALSE)
# inds = which(rename_df$freq_new>1)
# if (length(inds)>0){
#   stop = 1
#   stop_message = "Error: When recoding variable names to the latest convention, one or more of the original
#   variables mapped to the same recoded variable."
#   tmp = c("original.variable --> recoded.variable")
#   for (iii in 1:length(inds)){
#     tmp = c(tmp, paste(rename_df$orig[inds[iii]], rename_df$new[inds[iii]], sep = " --> "))
#   }
#   log[[length(log)+1]]  = c(stop_message, tmp)
# }
if (stop == 1){
out_list = list(cleaned_df = NULL, items_noresponse = NULL, stop = stop, log = log)
return(out_list)
}
# Finally recode the variable
names(input_df) = rename_df$new
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class)) %>%
tibble::rownames_to_column(var = "variable")
names(classes) <- c("var", "var.class")
classes
input_df
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class)) %>%
tibble::rownames_to_column(var = "variable")
names(classes) <- c("var", "var.class")
classes <- classes %>%
dplyr::mutate(check.var = var %in% vecQnames.SF) %>%
dplyr::mutate(OK = if_else(check.var == TRUE & var != "ID",
ifelse(var.class %in% c("numeric", "logical", "integer"),
TRUE, FALSE),NA))
classes
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class)) %>%
tibble::rownames_to_column(var = "variable")
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class))
classes
input_df
as.data.frame(sapply(input_df, class))
# Check that all variables outside of ID and ignored variables are numeric
classes <- as.data.frame(sapply(input_df, class)) %>%
mutate(var = names(input_df))
names(classes) <- c("var", "var.class")
classes
classes <- as.data.frame(sapply(input_df, class)) %>%
mutate(var = names(input_df))
classes
classes <- as.data.frame(sapply(input_df, class)) %>%
mutate(var = names(input_df)) %>%
rename(var.class = `sapply(input_df, class)`)
classes
classes <- classes %>%
dplyr::mutate(check.var = var %in% vecQnames.SF) %>%
dplyr::mutate(OK = if_else(check.var == TRUE & var != "ID",
ifelse(var.class %in% c("numeric", "logical", "integer"),
TRUE, FALSE),NA))
classes
not_numeric <- classes %>%
dplyr::filter(OK == FALSE) %>%
dplyr::select(var)
not_numeric
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
dat <- readxl::read_excel("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.xlsx")
credi::score(dat)
input_df <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
library(credi)
dat <- readr::read_csv("C:/Users/Jonat/Downloads/ECD_CREDI_Baseline Assessment_DATA_updated ids_test.csv")
credi::score(dat)
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
runApp()
runApp()
cs
getwd()
