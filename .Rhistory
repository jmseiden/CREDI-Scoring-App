get.rmse <- function(fold = 1, span = .5){
fold = 1
span = .1
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 1, by = .1))
mapply(FUN = get.rmse, fold = trials$fold, span = trials$span )
get.rmse <- function(fold = 1, span = .5){
fold = 1
span = .1
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 1, by = .1))
mapply(FUN = get.rmse, fold = trials$fold, span = trials$span )
mapply(FUN = get.rmse, fold = 1:5, span = seq(.5,5) )
trace(mapply(FUN = get.rmse, fold = 1:5, span = seq(.5,5) ))
debug(mapply(FUN = get.rmse, fold = 1:5, span = seq(.5,5) ))
> debugonce(mapply(FUN = get.rmse, fold = 1:5, span = seq(.5,5) )
)
debugonce(mapply(FUN = get.rmse, fold = 1:5, span = seq(.5,5)))
fold <- trials$fold[1]
span <- trials$span[1]
fold
span
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
mapply(FUN = get.rmse, 1, .5)
mapply(get.rmse, c(1,2), c(.5,.5))
mapply(get.rmse, trials)
mapply(get.rmse, trials$fold, trials$span)
mapply(get.rmse, 1, .1)
mapply(get.rmse, 1, 2)
mapply(get.rmse, 1:5, 2)
mapply(get.rmse, 1:5, 2:5)
mapply(get.rmse, 1:5, 1)
mapply(get.rmse, 5, 1)
mapply(get.rmse, 3, 1)
mapply(get.rmse, 1, 2)
map(get.rmse, trials)
purrr::map(trials)
install.packages("purrr")
install.packages("purrr")
library(purrr)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
purrr::map(get.rmse, trials)
?map
purrr::map_df(trials, get.rmse)
function(a, b) {
a + b
}
funky <- function(a, b) {
a + b
}
funky(1,2)
mapply(funky, trials)
mapply(funky(), trials)
mapply(funky(), trials$fold, trials$span)
mapply(funky, a = trials$fold, b = trials$span)
mapply(get.rmse, fold = trials$fold, span = trials$span)
get.rmse <- function(fold = 1, span = .5){
print(fold)
print(span)
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
get.rmse()
mapply(get.rmse, fold = trials$fold, span = trials$span)
fold = 2
span = .1
print(fold)
print(span)
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
fold = 2
span = .1
print(fold)
print(span)
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
fold = 2
span = .1
print(fold)
print(span)
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(overall.model, newdata = test %>% dplyr::select(AGE))
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
fold = 1
span = .5
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(overall.model, newdata = test)
fold = 1
span = .5
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
pull(AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(overall.model, newdata = test)
fold = 1
span = .5
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
select(AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(overall.model, newdata = test)
fold = 1
span = .5
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(overall.model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
fold = 1
span = .5
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(overall.model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
test$yhat <- predict(overall.model, newdata = test)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(AGE)
test
test$yhat <- predict(overall.model, data = test)
model <- loess(OVERALL ~ AGE, span = span, data = train)
model
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
fold = 1
span = .5
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
test$yhat
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
mapply(get.rmse, fold = trials$fold, span = trials$span)
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 1, by = .1))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
ggplot(trials, aes(x = span, y = RMSE)) +
geom_point()
outcomes <- normsamp %>%
dplyr::select(c(OVERALL, LANG, COG, MOT, SEM, SF, AGE))
#Get folds
set.seed(4224)
outcomes$folds <- sample(1:10, nrow(outcomes), replace = TRUE)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
ggplot(trials, aes(x = span, y = RMSE)) +
geom_point()
#Get folds
set.seed(4224)
outcomes$folds <- sample(1:6, nrow(outcomes), replace = TRUE)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
ggplot(trials, aes(x = span, y = RMSE)) +
geom_point()
ggplot(trials, aes(x = span, y = RMSE, color = fold)) +
geom_point()
outcomes$folds <- sample(1:100, nrow(outcomes), replace = TRUE)
set.seed(4224)
outcomes$folds <- sample(1:100, nrow(outcomes), replace = TRUE)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
ggplot(trials, aes(x = span, y = RMSE, color = fold)) +
geom_point()
set.seed(4224)
outcomes$folds <- sample(1:10, nrow(outcomes), replace = TRUE)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
ggplot(trials, aes(x = span, y = RMSE, color = fold)) +
geom_point()
ggplot(trials, aes(x = span, y = RMSE, color = as.factor(fold)) +
geom_point()
ggplot(trials, aes(x = span, y = RMSE, color = as.factor(fold))) +
geom_point()
ggplot(trials, aes(x = span, y = RMSE, color = as.factor(fold))) +
geom_point()
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- gamlss(OVERALL ~ lo(~AGE, span = span), sigma.formula = ~ lo(~AGE, span = span), data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- loess(OVERALL ~ AGE, span = span, data = train)
test$yhat <- predict(model, newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
min <- trials %>%
group_by(span) %>%
summarize(rmse = mean(RMSE))
which.min(min$rmse)
min$span[which.min(min$rmse)]
best.span
best.span <- min$span[which.min(min$rmse)]
best.span
overall <- outcomes %>%
dplyr::select(c(OVERALL, AGE))
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = overall)
preds$OVERALL_sigma <- exp(predict(overall.model, what = "sigma", newdata = preddat))
preds$OVERALL_mu <- predict(overall.model, what = "mu", newdata = preddat)
#OVERALL
overall <- outcomes %>%
dplyr::select(c(OVERALL, AGE))
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = overall)
preds$OVERALL_sigma <- exp(predict(overall.model, what = "sigma", newdata = preddat))
preds$OVERALL_mu <- predict(overall.model, what = "mu", newdata = preddat)
#LANG
lang <- outcomes %>%
dplyr::select(c(LANG, AGE))
lang.model <- gamlss(LANG ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = lang)
preds$LANG_sigma <- exp(predict(lang.model, what = "sigma", newdata = preddat))
preds$LANG_mu <- predict(lang.model, what = "mu", newdata = preddat)
#SEM
sem <- outcomes %>%
dplyr::select(c(SEM, AGE))
sem.model <- gamlss(SEM ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = sem)
preds$SEM_sigma <- exp(predict(sem.model, what = "sigma", newdata = preddat))
preds$SEM_mu <- predict(sem.model, what = "mu", newdata = preddat)
#MOT
mot <- outcomes %>%
dplyr::select(c(MOT, AGE))
mot.model <- gamlss(MOT ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = mot)
preds$MOT_sigma <- exp(predict(mot.model, what = "sigma", newdata = preddat))
preds$MOT_mu <- predict(mot.model, what = "mu", newdata = preddat)
#COG
cog <- outcomes %>%
dplyr::select(c(COG, AGE))
cog.model <- gamlss(COG ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = cog)
preds$COG_sigma <- exp(predict(cog.model, what = "sigma", newdata = preddat))
preds$COG_mu <- predict(cog.model, what = "mu", newdata = preddat)
#SF
sf <- outcomes %>%
dplyr::select(c(SF, AGE))
sf.model <- gamlss(SF ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = sf)
preds$SF_sigma <- exp(predict(sf.model, what = "sigma", newdata = preddat))
preds$SF_mu <- predict(sf.model, what = "mu", newdata = preddat)
#Save the preds object
save(preds, file = "conditional.mu.sigma.Rda")
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- gamlss(OVERALL ~ lo(~AGE, span = span), sigma.formula = ~ lo(~AGE, span = span), data = overall)
test$yhat <- predict(overall.model, what = "mu", newdata = preddat)
test$sigmahat <- predict(overall.model, what = "sigma", newdata = preddat)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- gamlss(OVERALL ~ lo(~AGE, span = span), sigma.formula = ~ lo(~AGE, span = span), data = overall)
test$yhat <- predict(overall.model, what = "mu", newdata = test)
test$sigmahat <- predict(overall.model, what = "sigma", newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
get.rmse <- function(fold = 1, span = .5){
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
model <- gamlss(OVERALL ~ lo(~AGE, span = span), sigma.formula = ~ lo(~AGE, span = span), data = train)
test$yhat <- predict(overall.model, what = "mu", newdata = test)
test$sigmahat <- predict(overall.model, what = "sigma", newdata = test)
sqrt(mean((test$yhat - test$OVERALL)^2, na.rm = TRUE))
}
trials <- expand.grid(fold = 1:5, span = seq(from = .1, to = 2, by = .05))
trials$RMSE <- mapply(get.rmse, fold = trials$fold, span = trials$span)
trials$RMSE <- mapply(get.rmse, fold = 1, span = 2)
fold <- 1
span <- .1
train <- outcomes %>%
filter(folds == fold)
test <- outcomes %>%
filter(folds != fold) %>%
dplyr::select(OVERALL, AGE)
test
model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
model
model <- NULL
test$yhat <- predict(model, what = "mu", newdata = test)
model <- gamlss(OVERALL ~ lo(~AGE, span = span),
sigma.formula = ~ lo(~AGE, span = span),
data = train)
test$yhat <- predict(model, what = "mu", newdata = test)
test$sigmahat <- predict(model, what = "sigma", newdata = test)
predict(model, what = "sigma", newdata = test)
test$sigmahat <- predict(model, what = "sigma", newdata = test)
min
#OVERALL
overall <- outcomes %>%
dplyr::select(c(OVERALL, AGE))
overall.model <- gamlss(OVERALL ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = overall)
preds$OVERALL_sigma <- exp(predict(overall.model, what = "sigma", newdata = preddat))
preds$OVERALL_mu <- predict(overall.model, what = "mu", newdata = preddat)
#LANG
lang <- outcomes %>%
dplyr::select(c(LANG, AGE))
lang.model <- gamlss(LANG ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = lang)
preds$LANG_sigma <- exp(predict(lang.model, what = "sigma", newdata = preddat))
preds$LANG_mu <- predict(lang.model, what = "mu", newdata = preddat)
#SEM
sem <- outcomes %>%
dplyr::select(c(SEM, AGE))
sem.model <- gamlss(SEM ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = sem)
preds$SEM_sigma <- exp(predict(sem.model, what = "sigma", newdata = preddat))
preds$SEM_mu <- predict(sem.model, what = "mu", newdata = preddat)
#MOT
mot <- outcomes %>%
dplyr::select(c(MOT, AGE))
mot.model <- gamlss(MOT ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = mot)
preds$MOT_sigma <- exp(predict(mot.model, what = "sigma", newdata = preddat))
preds$MOT_mu <- predict(mot.model, what = "mu", newdata = preddat)
#COG
cog <- outcomes %>%
dplyr::select(c(COG, AGE))
cog.model <- gamlss(COG ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = cog)
preds$COG_sigma <- exp(predict(cog.model, what = "sigma", newdata = preddat))
preds$COG_mu <- predict(cog.model, what = "mu", newdata = preddat)
#SF
sf <- outcomes %>%
dplyr::select(c(SF, AGE))
sf.model <- gamlss(SF ~ lo(~AGE, span = best.span), sigma.formula = ~ lo(~AGE, span = best.span), data = sf)
preds$SF_sigma <- exp(predict(sf.model, what = "sigma", newdata = preddat))
preds$SF_mu <- predict(sf.model, what = "mu", newdata = preddat)
#Save the preds object
save(preds, file = "conditional.mu.sigma.Rda")
getwd()
load("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/jms_credi/R/sysdata.rda")
getwd()
load("C:/Users/Jonat/Dropbox/CREDI/Data/conditional.mu.sigma.Rda")
zscoredat <- preds
preds <- NULL
save.image("~/Git Hub/jms_credi/R/sysdata.rda.RData")
# devtools::install_github("jmseiden/jms_credi")
devtools::install_github("jmseiden/jms_credi")
shiny::runApp('~/Git Hub/CREDI Scoring App')
library(tidyverse)
dat <- read_csv("C:/Users/Jonat/Dropbox/CREDI/Data/2020-02 New data/sample_for_scoring.csv")
scores1 <- jmscredi::score(data = dat, interactive = FALSE, reverse_code = FALSE)
scores <- scores1$scores
scores$ID
scores$NOTES
runApp('~/Git Hub/CREDI Scoring App')
devtools::install_github("jmseiden/jms_credi")
runApp('~/Git Hub/CREDI Scoring App')
?gsub
runApp('~/Git Hub/CREDI Scoring App')
