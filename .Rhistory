y1_child_outcomes <-  y1_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pra_total, c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y1_", .x)) %>%
rename(cid = y1_cid)
y2_child_outcomes <-  y2_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pra_total, c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y2_", .x)) %>%
rename(cid = y2_cid)
#Rename all y1 variables and y2 variables so we don't lose them when merging
y1_child_outcomes <-  y1_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y1_", .x)) %>%
rename(cid = y1_cid)
y2_child_outcomes <-  y2_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y2_", .x)) %>%
rename(cid = y2_cid)
#Rename all y1 variables and y2 variables so we don't lose them when merging
y1_child_outcomes <-  y1_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pra_total, c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y1_", .x)) %>%
rename(cid = y1_cid)
y2_child_outcomes <-  y2_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y2_", .x)) %>%
rename(cid = y2_cid)
y2_child_outcomes <-  y2_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pbsa_allgrades_total, c_pra_allgrades_total, c_quils_total_raw,
c_wjlw_str, c_wjap_str) %>%
rename(c_pra_total = c_pra_allgrades_total,
c_pbsa_total = c_pbsa_allgrades_total) %>%
rename_all( ~ paste0("y2_", .x)) %>%
rename(cid = y2_cid)
#Rename all y1 variables and y2 variables so we don't lose them when merging
y1_child_outcomes <-  y1_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pra_total, c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y1_", .x)) %>%
mutate(cid = as.character(y1_cid))
y2_child_outcomes <-  y2_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pbsa_allgrades_total, c_pra_allgrades_total, c_quils_total_raw,
c_wjlw_str, c_wjap_str) %>%
rename(c_pra_total = c_pra_allgrades_total,
c_pbsa_total = c_pbsa_allgrades_total) %>%
rename_all( ~ paste0("y2_", .x)) %>%
mutate(cid = as.character(y2_cid))
#Merge Y2 and Y1 data together
child_outcomes <- merge(y1_child_outcomes, y2_child_outcomes, by = "cid")
?pca
princomp(x = child_outcomes %>%
select(starts_with("y1")),
cor = FALSE, scores = TRUE)
View(child_outcomes)
View(child_outcomes)
#Merge Y2 and Y1 data together
child_outcomes <- merge(y1_child_outcomes, y2_child_outcomes, by = "cid") %>%
complete.cases()
#Merge Y2 and Y1 data together
child_outcomes <- merge(y1_child_outcomes, y2_child_outcomes, by = "cid") %>%
drop.na()
#Merge Y2 and Y1 data together
child_outcomes <- merge(y1_child_outcomes, y2_child_outcomes, by = "cid") %>%
na.omit()
load("C:/Users/Jonat/OneDrive - Harvard University/Desktop/FILE.rda")
read.table("C:/Users/Jonat/OneDrive - Harvard University/Desktop/FILE.TXT")
read.table("C:/Users/Jonat/OneDrive - Harvard University/Desktop/FILE.TXT",  sep="\t")
dat <- read.table("C:/Users/Jonat/OneDrive - Harvard University/Desktop/FILE.TXT",  sep="\t")
dat <- read.table("C:/Users/Jonat/OneDrive - Harvard University/Desktop/FILE.TXT",
sep="\t",
header=TRUE)
dat
#Merge Y2 and Y1 data together
child_outcomes <- merge(y1_child_outcomes, y2_child_outcomes, by = "cid") %>%
mutate(gain_c_mefs_str = y2_c_mefs_str - y1_c_mefs_str)
table(child_outcomes$gain)
table(child_outcomes$gain_c_mefs_str)
hist(child_outcomes$gain_c_mefs_str)
summary(child_outcomes$gain_c_mefs_str)
View(y1_obs)
View(y1_obs)
#We will play around with the MEFS gain score
outcome_obs <- merge(child_outcomes, y1_obs, by "cid")
#We will play around with the MEFS gain score
outcome_obs <- merge(child_outcomes, y1_obs, by = "cid")
#We will play around with the MEFS gain score
outcomes_and_obs <- merge(child_outcomes, y1_obs, by = "cid")
table(child_outcomes$cid)
table(outcomes_and_obs$cid)
#We will play around with the MEFS gain score
outcomes_and_obs <- left_join(child_outcomes, y1_obs, by = "cid")
#We will play around with the MEFS gain score
outcomes_and_obs <- left_join(child_outcomes, y1_obs, by = "cid") %>%
filter(!is.na(classid))
#We will play around with the MEFS gain score
outcomes_and_obs <- left_join(child_outcomes, y1_obs, by = "cid")
caretype <- read.dta13("y1caretype.dta")
caretype <- read.dta13("y1caretype.dta") %>%
mutate(cid = as.character(cid))
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid")
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid") %>%
mtuate(hasobservation = is.na(classid))
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid") %>%
mutate(hasobservation = is.na(classid))
outcomes_and_obs
outcomes_and_obs <- left_join(child_outcomes, y1_obs, by = "cid")
caretype <- read.dta13("y1caretype.dta") %>%
mutate(cid = as.character(cid))
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid") %>%
mutate(hasobservation = is.na(classid))
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid") %>%
mutate(hasobservation = is.na(classid)) %>%
filter(!is.na(caretype))
#We will play around with the MEFS gain score
outcomes_and_obs <- left_join(child_outcomes, y1_obs, by = "cid")
caretype <- read.dta13("y1caretype.dta") %>%
mutate(cid = as.character(cid))
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid") %>%
mutate(hasobservation = is.na(classid)) %>%
filter(!is.na(caretype))
outcomes_and_obs %>%
group_by(caretype) %>%
summarize(hasobservation = mean(hasobservation))
outcomes_and_obs %>%
group_by(caretype) %>%
summarize(hasobservation = mean(hasobservation),
n = n())
View(outcomes_and_obs)
View(outcomes_and_obs)
#
outcomes_and_obs %>%
mutate(gain_c_mefs_str = y2_c_mefs_str - y1_c_mefs_str) %>%
filter(!is.na(gain_c_mefs_str) & !is.na(classid))
#
outcomes_and_obs_analysis %>%
mutate(gain_c_mefs_str = y2_c_mefs_str - y1_c_mefs_str) %>%
filter(!is.na(gain_c_mefs_str) & !is.na(classid))
#
outcomes_and_obs_analysis <- outcomes_and_obs %>%
mutate(gain_c_mefs_str = y2_c_mefs_str - y1_c_mefs_str) %>%
filter(!is.na(gain_c_mefs_str) & !is.na(classid))
outcomes_and_obs_analysis
View(outcomes_and_obs)
View(outcomes_and_obs_analysis)
View(outcomes_and_obs_analysis)
#Input the Year One long child and teacher observation data
y1_child_obs_raw <- read.dta13("y1o_c_long.dta")
y1_teacher_obs_raw <- read.dta13("y1o_t_long.dta")
#Re-format the child data so that it is one row per child
y1_child_obs <- y1_child_obs_raw %>%
mutate(cid = ifelse(childid == "N/A", o_c_uniqueid, childid)) %>%
group_by(cid, classid) %>%
mutate(nsweeps = n()) %>%
select(c(classid, nsweeps, o_c_verbal_talk:o_c_focus_none)) %>%
summarize(across(everything(), list(mean)))  %>%
rename_with( ~ str_remove(., '_1')) %>%
filter(nsweeps >= 10 ) %>% #THIS IS AN ARBITRARY PARAMETER
group_by(classid) %>%
mutate(
nclass = n(),
#This ugly mess omits the observation of the child when calculating the mean and variance of the child in question
o_c_verbal_talk_classmean = map_dbl(row_number(), ~ mean(o_c_verbal_talk[-.x])),
o_c_verbal_talk_classvar = map_dbl(row_number(), ~ sd(o_c_verbal_talk[-.x])),
o_c_verbal_listen_classmean = map_dbl(row_number(), ~ mean(o_c_verbal_listen[-.x])),
o_c_verbal_listen_classvar = map_dbl(row_number(), ~ sd(o_c_verbal_listen[-.x])),
o_c_talk_adult_classmean = map_dbl(row_number(), ~ mean(o_c_talk_adult[-.x])),
o_c_talk_adult_classvar = map_dbl(row_number(), ~ sd(o_c_talk_adult[-.x])),
o_c_listen_adult_classmean = map_dbl(row_number(), ~ mean(o_c_listen_adult[-.x])),
o_c_listen_adult_classvar = map_dbl(row_number(), ~ sd(o_c_listen_adult[-.x])),
o_c_transition_classmean = map_dbl(row_number(), ~ mean(o_c_transition[-.x])),
o_c_transition_classvar = map_dbl(row_number(), ~ sd(o_c_transition[-.x])),
o_c_associative_classmean = map_dbl(row_number(), ~ mean(o_c_associative[-.x])),
o_c_associative_classvar = map_dbl(row_number(), ~ sd(o_c_associative[-.x])),
o_c_cooperative_classmean = map_dbl(row_number(), ~ mean(o_c_cooperative[-.x])),
o_c_cooperative_classvar = map_dbl(row_number(), ~ sd(o_c_cooperative[-.x])),
o_c_sequential_classmean = map_dbl(row_number(), ~ mean(o_c_sequential[-.x])),
o_c_sequential_classvar = map_dbl(row_number(), ~ sd(o_c_sequential[-.x])),
o_c_passive_instr_classmean = map_dbl(row_number(), ~ mean(o_c_passive_instr[-.x])),
o_c_passive_instr_classvar = map_dbl(row_number(), ~ sd(o_c_passive_instr[-.x])),
o_c_involve_low_classmean = map_dbl(row_number(), ~ mean(o_c_involve_low[-.x])),
o_c_involve_low_classvar = map_dbl(row_number(), ~ sd(o_c_involve_low[-.x])),
o_c_focus_math_classmean = map_dbl(row_number(), ~ mean(o_c_focus_math[-.x])),
o_c_focus_math_classvar = map_dbl(row_number(), ~ sd(o_c_focus_math[-.x])),
o_c_focus_read_classmean = map_dbl(row_number(), ~ mean(o_c_focus_read[-.x])),
o_c_focus_read_classvar = map_dbl(row_number(), ~ sd(o_c_focus_read[-.x])),
) %>%
ungroup
#Re-format the teacher data so that it is one row per class
y1_teacher_obs <- y1_teacher_obs_raw %>%
group_by(o_t_uniqueid , classid) %>%
mutate(nsweeps = n()) %>% #DO WE WANT CLASS AVERAGES OR AVERAGES OF ADULTS?
select(c(classid, nsweeps, o_t_focus_ll, o_t_focus_math, o_t_focus_n,
o_t_tone_pos, o_t_tone_neg, o_t_tone_flat, o_t_attention_s,
o_t_es_s, o_t_task_i, o_t_sched_t)) %>%
summarize(across(everything(), list(mean)))  %>%
rename_with( ~ str_remove(., '_1')) %>%
group_by(classid) %>%
summarize(
nadult = n(),
o_t_focus_ll = mean(o_t_focus_ll),
o_t_focus_math = mean(o_t_focus_math),
o_t_focus_n = mean(o_t_focus_n),
o_t_tone_pos = mean(o_t_tone_pos),
o_t_tone_neg = mean(o_t_tone_neg),
o_t_tone_flat = mean(o_t_tone_flat),
o_t_attention_s = mean(o_t_attention_s),
o_t_es_s = mean(o_t_es_s),
o_t_task_i = mean(o_t_task_i),
o_t_sched_t = mean(o_t_sched_t)) %>%
ungroup
#Merge teacher and child observations
y1_obs <- left_join(y1_child_obs, y1_teacher_obs, by = "classid")
table(y1_teacher_obs$nadult)
table(y1_teacher_obs$nsweeps)
#Get Year 1 and Year 2 child data
y1_child_outcomes_raw <- read.dta13("y1c.dta")
y2_child_outcomes_raw <- read.dta13("y2c.dta")
#Rename all y1 variables and y2 variables so we don't lose them when merging
y1_child_outcomes <-  y1_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pra_total, c_pbsa_total, c_quils_total_raw, c_wjlw_str, c_wjap_str) %>%
rename_all( ~ paste0("y1_", .x)) %>%
mutate(cid = as.character(y1_cid))
y2_child_outcomes <-  y2_child_outcomes_raw %>%
select(cid, c_mefs_str, c_pt_pcorrect, c_ltr_cogsoc_comp, c_ltr_emo_comp,
c_pbsa_allgrades_total, c_pra_allgrades_total, c_quils_total_raw,
c_wjlw_str, c_wjap_str) %>%
rename(c_pra_total = c_pra_allgrades_total,
c_pbsa_total = c_pbsa_allgrades_total) %>%
rename_all( ~ paste0("y2_", .x)) %>%
mutate(cid = as.character(y2_cid))
#Merge Y2 and Y1 data together
child_outcomes <- merge(y1_child_outcomes, y2_child_outcomes, by = "cid")
#We will play around with the MEFS gain score
outcomes_and_obs <- left_join(child_outcomes, y1_obs, by = "cid")
#Add in the care type
caretype <- read.dta13("y1caretype.dta") %>%
mutate(cid = as.character(cid))
outcomes_and_obs <- left_join(outcomes_and_obs, caretype, by = "cid") %>%
mutate(hasobservation = is.na(classid)) %>%
filter(!is.na(caretype))
outcomes_and_obs_analysis <- outcomes_and_obs %>%
mutate(gain_c_mefs_str = y2_c_mefs_str - y1_c_mefs_str) %>%
filter(!is.na(gain_c_mefs_str) & !is.na(classid))
View(outcomes_and_obs_analysis)
View(outcomes_and_obs_analysis)
outcomes_and_obs <- na.omit()
outcomes_and_obs_full <- outcomes_and_obs %>%
na.omit()
outcomes_and_obs_full
View(outcomes_and_obs)
View(outcomes_and_obs)
outcomes_and_obs_full <- outcomes_and_obs %>%
filter(!is.na(classid))
View(outcomes_and_obs_full)
View(outcomes_and_obs_full)
?na.omit
na.omit(outcomes_and_obs_full)
misstable(outcomes_and_obs_full)
miss.table(outcomes_and_obs_full)
#
outcomes_and_obs_analysis <- outcomes_and_obs_full %>%
mutate(gain_c_mefs_str = y2_c_mefs_str - y1_c_mefs_str) %>%
filter(!is.na(gain_c_mefs_str))
length(unique(outcomes_and_obs_analysis$classid))
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
?credi
??credi
dat <- data.frame(ID = 1:3, AGE = c(3,5,4), LF1 = c(1,0,NA) , LF2 = c(0,0,0), LF3 = c(1,0,1), LF4 = c(1,1,1), LF5 = (1,0,0))
dat <- data.frame(ID = 1:3, AGE = c(3,5,4), LF1 = c(1,0,NA) , LF2 = c(0,0,0), LF3 = c(1,0,1), LF4 = c(1,1,1), LF5 = (1,0,0))
dat <- data.frame(ID = 1:3, AGE = c(3,5,4), LF1 = c(1,0,NA) , LF2 = c(0,0,0), LF3 = c(1,0,1), LF4 = c(1,1,1), LF5 = c(1,0,0))
scored_dat <- credi::score(data = NULL, reverse_code = FALSE, interactive = FALSE, min_items = 5)
scored_dat <- credi::score(data = dat, reverse_code = FALSE, interactive = FALSE, min_items = 5)
dat <- data.frame(ID = 1:3, AGE = c(3,5,4), QM01 = c(1,0,NA) , QM02 = c(0,0,0), QM03 = c(1,0,1), QM04 = c(1,1,1), QM05 = c(1,0,0))
scored_dat <- credi::score(data = dat, reverse_code = FALSE, interactive = FALSE, min_items = 5)
View(mest_df)
View(mest_df)
load("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/jms_credi/R/sysdata.rda")
View(mest_df)
View(mest_df)
dat <- data.frame(ID = 1:3, AGE = c(3,5,4), QM08 = c(1,0,NA) , QM06 = c(0,0,0), QM07 = c(1,0,1), QC06 = c(1,1,1), QS01 = c(1,0,0))
scored_dat <- credi::score(data = dat, reverse_code = FALSE, interactive = FALSE, min_items = 5)
roxygen2::roxygenize()
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
x <- NA
y <- NA
x == NA
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
?score
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
?score
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/CREDI_test_nomissing.xlsx")
score(df, interactive = FALSE)
cred::score(df, interactive = FALSE)
credi::score(df, interactive = FALSE)
scored <- credi::score(df, interactive = FALSE)
scored
corr(scored$scores$SF, scored$scores$Overall)
cor(scored$scores$SF, scored$scores$Overall)
scored$scores$SF
cor(scored$scores$SF, scored$scores$OVERALL)
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/test_data.xlsx")
df
scored <- credi::score(df, interactive = FALSE)
cor(scored$scores$SF, scored$scores$OVERALL)
scored
as.numeric(df)
df <- apply(df, as.numeric)
?apply
df <- apply(df, 1, FUN = as.numeric)
df
df <- apply(df, 2, FUN = as.numeric)
df
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/test_data.xlsx")
df2 <- apply(df, 2, FUN = as.numeric)
df2
df2
scored <- credi::score(df2, interactive = FALSE)
df2 <- as.data.frame(apply(df, 2, FUN = as.numeric))
scored <- credi::score(df2, interactive = FALSE)
cor(scored$scores$SF, scored$scores$OVERALL)
scored
scored$scores$NOTES
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/test_data.xlsx")
df
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
scored <- credi::score(df, interactive = FALSE)
cor(scored$scores$SF, scored$scores$OVERALL)
scored <- credi::score(df, interactive = FALSE)
scored
df2 <- as.data.frame(apply(df, 2, FUN = as.numeric))
scored <- credi::score(df2, interactive = FALSE)
scored <- credi::score(df2, interactive = FALSE)
cor(scored$scores$SF, scored$scores$OVERALL)
scored$scores$SF
cor(scored$scores$LANG, scored$scores$OVERALL)
cor(scored$scores$SEM, scored$scores$OVERALL)
cor(scored$scores$MOT, scored$scores$OVERALL)
cor(scored$scores$COG, scored$scores$OVERALL)
scatter(scored$scores$COG, scored$scores$OVERALL)
installr::uninstall.packages("credi")
installr::uninstall.packages("credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/test_data.xlsx")
df
scored <- credi::score(df2, interactive = FALSE)
scored$scores
scored$NOTES
scored$scores$NOTES
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/CREDI_test_SF.xlsx")
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/CREDI_test_SF.xlsx")
df
scored <- credi::score(df, interactive = FALSE)
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/CREDI_test_SF.xlsx")
scored <- credi::score(df, interactive = FALSE)
scored$scores$NOTES
scored$scores
notes_i = paste0(notes_i, "Multidimensional scoring procedure scale did not converge; subscores not produced.")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/CREDI_test_SF.xlsx")
scored <- credi::score(df, interactive = FALSE)
scored$scores
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
scored <- credi::score(df, interactive = FALSE)
scored
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df1 <- apply(df1, 1, asnumeric)
df1 <- apply(df1, 1, as.numeric)
scored <- credi::score(df, interactive = FALSE)
scored
scored <- credi::score(df1, interactive = FALSE)
df1 <- as.data.frame(apply(df1, 1, as.numeric))
scored <- credi::score(df1, interactive = FALSE)
scored
df1
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df1 <- as.data.frame(apply(df1, 1, as.numeric))
scored <- credi::score(df1, interactive = FALSE)
scored
df1
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df1 <- data.frame(apply(df1, 1, as.numeric))
df1
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df1
df2 <- apply(df1, 1, as.numeric)
df2
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df2 <- apply(df1, 2, as.numeric)
df2
df1 <- ad.data.frame(apply(df1, 2, as.numeric))
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df1 <- as.data.frame(apply(df1, 2, as.numeric))
scored <- credi::score(df1, interactive = FALSE)
scored
scored <- credi::score(df1, interactive = FALSE)
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
df1 <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/credi_test_ethiopia.xlsx")
df1 <- as.data.frame(apply(df1, 2, as.numeric))
scored <- credi::score(df1, interactive = FALSE)
scored
names(scored$scores)
df <- readxl::read_xlsx("C:/Users/Jonat/OneDrive - Harvard University/GSED work/CREDI_test_SF.xlsx")
scored <- credi::score(df, interactive = FALSE)
scored
names(scored$scores)
scale_height = knitr::opts_chunk$get('fig.height')*0.5
scale_width = knitr::opts_chunk$get('fig.width')*1.25
knitr::opts_chunk$set(fig.height = scale_height, fig.width = scale_width)
theme_update(legend.text = element_text(size = rel(0.7)))
theme_update(plot.title = element_text(hjust = 0.5))
title = "TITLE"
headers = c("Item", "Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree")
x_label = "Category"
data_csv_text = "Type   Strongly Disagree   Disagree    Neutral Agree   Strongly Agree
Ask weather-related questions (e.g. temperature, need umbrella) 0   0.05    0   0.3 0.65
Set alarms, events, and reminders   0   0.05    0.1 0.25    0.6
Set timers  0   0   0.2 0.4 0.4
Get alerts (e.g. doorbells, smoke alarms)   0   0   0.05    0.35    0.6
Search for information (e.g. recipes, movie times)  0   0.05    0.05    0.2 0.7
Connect to other smart devices (e.g. lights, TV, cars)  0.05    0   0.05    0.5 0.4
Video-based communication (e.g. videophone/VRS) 0   0.05    0.1 0.55    0.3
Notifications (e.g. read, delete notifications) 0   0.05    0.35    0.45    0.15
Information, Warnings (e.g. traffic, weather conditions)    0   0   0.05    0.5 0.45
Manage notes (e.g. to-do lists, shopping lists) 0   0   0.4 0.4 0.2"
location = "<REDACTED_FOR_PRIVACY>"
installr::uninstall.packages("credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
?score
knitr::opts_chunk$set(echo = TRUE)
require(devtools)
devtools::install_github("https://github.com/marcus-waldman/credi")
library(credi)
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
library(credi)
credi::clean()
credi
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(credi)
library(credi)
roxygen2::roxygenise("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
devtools::check(credi)
devtools::check("credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
library(stats)
?stats
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
devtools::check("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
shiny::runApp('Git Hub/CREDI Scoring App')
installr::uninstall.packages("credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
runApp('Git Hub/CREDI Scoring App')
devtools::install_github("https://github.com/marcus-waldman/credi")
devtools::install_github("https://github.com/marcus-waldman/credi")
runApp('Git Hub/CREDI Scoring App')
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
runApp('Git Hub/CREDI Scoring App')
runApp('Git Hub/CREDI Scoring App')
installr::uninstall.packages("credi")
devtools::install("C:/Users/Jonat/OneDrive - Harvard University/Documents/Git Hub/credi")
runApp('Git Hub/CREDI Scoring App')
